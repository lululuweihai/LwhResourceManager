//file:noinspection GradlePackageUpdate
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath('org.openjfx:javafx-plugin:0.0.10')
        classpath('org.springframework.boot:spring-boot-gradle-plugin:2.3.12.RELEASE')
    }
}

ext {
    vmOpinion = '-Xmx128M -Xms64M -Xmn32M --add-opens java.base/java.lang.reflect=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED'
}

group 'org.lwh'
version '0.1.0'

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.openjfx.javafxplugin'
    apply plugin: 'org.springframework.boot'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    repositories {
        mavenLocal()
        mavenCentral()
    }

    javafx {
        version = '11'
        modules = ['javafx.controls', 'javafx.fxml']
    }

    dependencies {
        implementation('org.springframework.boot:spring-boot-starter:2.5.4') {
            exclude module: 'snakeyaml'
        }
        implementation('org.springframework.boot:spring-boot-starter-aop:2.5.4') {
            exclude module: 'snakeyaml'
        }
        implementation 'com.jfoenix:jfoenix:9.0.10'
        implementation 'com.google.guava:guava:31.0.1-jre'
        compileOnly 'org.projectlombok:lombok:1.18.20'

        testImplementation 'org.projectlombok:lombok:1.18.20'
        annotationProcessor 'org.projectlombok:lombok:1.18.20'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
        testImplementation 'junit:junit:4.13.1'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.2'
        testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
        testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.4'
    }

    test {
        useJUnitPlatform()
    }
}

task cleanSubBuild(type: Delete) {
    subprojects.forEach(project -> {
        if (project.buildDir.exists()) delete project.buildDir
    })
}

task cleanLog(type: Delete) {
    delete "${projectDir.getCanonicalPath()}/log"
}

/*
jar {
    //noinspection GroovyAssignabilityCheck
    manifest {
        attributes 'Manifest-Version': rootProject.version
    }
}

task cleanBuild(type: Delete) {
    delete rootProject.buildDir
}

task buildLib(type: Exec) {
    workingDir '/'
    commandLine 'cmd', '/c', 'rename build.gradle tempBuild.gradle && rename libBuild.gradle build.gradle && gradle :jar && rename build.gradle libBuild.gradle && rename tempBuild.gradle build.gradle'
}

task buildLibErrorRecovery(type: Exec) {
    workingDir '/'
    commandLine 'cmd', '/c', 'rename build.gradle libBuild.gradle && rename tempBuild.gradle build.gradle'
}

*/

